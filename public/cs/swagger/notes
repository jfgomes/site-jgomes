https://www.bacancytechnology.com/blog/laravel-swagger-integration



Step 1: Install Required Packages
Install the `darkaonline/l5-swagger` package and the `tymon/jwt-auth` package using Composer by running the following command in the terminal:

Copy Text
composer require darkaonline/l5-swagger tymon/jwt-auth
Step 2: Configure JWT Authentication
After installing the `tymon/jwt-auth` package, publish the configuration file by running the following command in the terminal which will create a file `config/jwt.php`.

Copy Text
php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
Next we need to create JWT secret key by running the following command:

Copy Text
php artisan jwt:secret
Step 3: Configure Swagger
We can publish the configuration file for `darkaonline/l5-swagger` by running the following command:

Copy Text
php artisan vendor:publish --provider "L5Swagger\L5SwaggerServiceProvider"
Step 4: Implement User Registration Logic
Open/Add the UserController and add the register method to handle user registration. Hereâ€™s an example:

Copy Text
/**
* @OA\Post(
     *     path="/api/register",
     *     summary="Register a new user",
     *     @OA\Parameter(
     *         name="name",
     *         in="query",
     *         description="User's name",
     *         required=true,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Parameter(
     *         name="email",
     *         in="query",
     *         description="User's email",
     *         required=true,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Parameter(
     *         name="password",
     *         in="query",
     *         description="User's password",
     *         required=true,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Response(response="201", description="User registered successfully"),
     *     @OA\Response(response="422", description="Validation errors")
     * )
     */
    public function register(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|unique:users|max:255',
            'password' => 'required|string|min:8',
        ]);

        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
        ]);

        return response()->json(['message' => 'User registered successfully'], 201);
    }
Step 5: Create Login Controller
Create a LoginController to handle the login logic with following command:

Copy Text
php artisan make:controller LoginController
Step 6: Implement Login Logic
Copy Text
/**
     * @OA\Post(
     *     path="/api/login",
     *     summary="Authenticate user and generate JWT token",
     *     @OA\Parameter(
     *         name="email",
     *         in="query",
     *         description="User's email",
     *         required=true,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Parameter(
     *         name="password",
     *         in="query",
     *         description="User's password",
     *         required=true,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Response(response="200", description="Login successful"),
     *     @OA\Response(response="401", description="Invalid credentials")
     * )
     */
    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');
 if (Auth::attempt($credentials)) {
            $token = Auth::user()->createToken('api_token')->plainTextToken;
            return response()->json(['token' => $token], 200);
        }
return response()->json(['error' => 'Invalid credentials'], 401);
    }
Step 7: Implement Logged In User Details
Open the UserController.php file and add the following code to fetch the logged-in user details:

Copy Text
/**
     * @OA\Get(
     *     path="/api/user",
     *     summary="Get logged-in user details",
     *     @OA\Response(response="200", description="Success"),
     *     security={{"bearerAuth":{}}}
     * )
     */
    public function getUserDetails(Request $request)
    {
        $user = $request->user();
        return response()->json(['user' => $user], 200);
    }
Step 8: Create Routes
Copy Text
Route::post('/register', 'App\Http\Controllers\UserController@register');
Route::post('/login', 'App\Http\Controllers\LoginController@login');
Route::get('/user', 'App\Http\Controllers\UserController@getUserDetails')->middleware('auth:sanctum');
Step 9: Generate Swagger
You can add this to app/Http/Controllers/Controller.php:

Copy Text
/**
 * @OA\Info(
 *    title="Swagger with Laravel",
 *    version="1.0.0",
 * )
 * @OA\SecurityScheme(
 *     type="http",
 *     securityScheme="bearerAuth",
 *     scheme="bearer",
 *     bearerFormat="JWT"
 * )

 */
Then Generate the Swagger documentation by running the following command:

Copy Text
php artisan l5-swagger:generate
