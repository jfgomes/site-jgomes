["name" => "to" , "email" => "to@to.to", "subject" => "test subject" , "content" => "test message"]


{
    "name": "to",
    "email": "to@to.to",
    "subject": "test subject",
    "content": "test message"
}



php artisan migrate --path=database/migrations/2024_01_21_210119_create_messages_table.php


<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Messages extends Model
{
    protected $table = 'messages';

    protected $fillable = ['campo1', 'campo2'];
}




Os namespaces App\Jobs e App\Console em Laravel são usados para organizar diferentes tipos de classes em suas aplicações.

App\Jobs Namespace:

Finalidade: O namespace App\Jobs é usado para armazenar classes de trabalhos em segundo plano (jobs) que podem ser executadas em filas.
Uso Típico: Jobs em Laravel são usados para executar tarefas em segundo plano, como processamento de fila, envio de e-mails e execução de operações demoradas.
Exemplo: Quando você cria um job usando o comando php artisan make:job, o arquivo gerado estará no namespace App\Jobs.
php
Copy code
namespace App\Jobs;

use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

class ExampleJob implements ShouldQueue
{
    use InteractsWithQueue, SerializesModels;

    public function handle()
    {
        // Lógica do job
    }
}
App\Console Namespace:

Finalidade: O namespace App\Console é usado para armazenar classes relacionadas à CLI (Interface de Linha de Comando) do Laravel, como comandos personalizados.
Uso Típico: Comandos personalizados que você cria para sua aplicação Laravel são geralmente armazenados no namespace App\Console.
Exemplo: Quando você cria um comando usando o comando php artisan make:command, o arquivo gerado estará no namespace App\Console.
php
Copy code
namespace App\Console\Commands;

use Illuminate\Console\Command;

class ExampleCommand extends Command
{
    protected $signature = 'example:command';
    protected $description = 'Exemplo de um comando personalizado.';

    public function handle()
    {
        // Lógica do comando
    }
}
Em resumo, App\Jobs é usado para armazenar classes relacionadas a trabalhos em segundo plano e filas, enquanto App\Console é usado para classes relacionadas à CLI, como comandos personalizados. Ambos são usados para organizar o código de maneira mais coesa e fácil de entender.


https://medium.com/@lpjfilho/filas-e-mensageria-com-rabbitmq-e-laravel-parte-2-a9a052b8d603



<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class DbBackups extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'db:backups';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command to do db backups';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $ip   = env('DB_HOST'); //exec("docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my_routineris_mysql");
        $db   = env('DB_DATABASE');

        $path     = base_path() . "/storage/database/";
        if (!file_exists($path)) {
            mkdir($path, 0600, true);
        }
        $file     = "$path/db_backup.sql";
        $file_bak = "$path/db_backup_" . date("Y_m_d_H_s_i") . ".sql";

        $config = base_path() . "/app/Console/Commands/config.cnf";
        if (true === file_exists($file)) {
            unlink($file);
        }

        exec("mysqldump --defaults-extra-file=$config --host=$ip $db > $file");
        exec("mysqldump --defaults-extra-file=$config --host=$ip $db > $file_bak");

        // limit the number of backups to 30 files
        exec( "cd $path && ls -t | tail -n +31 | xargs -I {} rm {}");

        return 0;
    }
}

